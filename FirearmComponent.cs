using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Hitbox.Firearms;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.AddressableAssets;

public abstract class FirearmComponent : ScriptableObject
{
    #region --- VARIABLES ---
    
    public FirearmComponentTag tag;
    public FirearmComponentNodeProfile[] componentNodes = Array.Empty<FirearmComponentNodeProfile>();
    public FirearmComponentAdditionalData[] additionalData = Array.Empty<FirearmComponentAdditionalData>();
    public AssetReference reference;
    
    public GameObject componentPrefab;

    #endregion
    
    #region --- METHODS ---

    public virtual FirearmComponentRuntime GetRuntime => new ();

    public virtual FirearmComponentRuntime GenerateRuntime(FirearmComponentNode parentNode)
    {
        FirearmComponentRuntime runtime = GetRuntime;

        if (parentNode.component.componentPrefab != null)
        {
            runtime.componentObject = Instantiate(parentNode.component.componentPrefab, parentNode.transform);
            runtime.componentObject.transform.rotation = parentNode.transform.rotation;
        }
        
        List<FirearmComponentNode> nodes = new List<FirearmComponentNode>();
        foreach (FirearmComponentNodeProfile profile in componentNodes)
        {
            GameObject newNodeObj = new (profile.name) { 
                transform = {
                    parent = parentNode.transform,
                    localPosition = profile.nodePosition,
                    rotation = parentNode.transform.rotation
                }
            };

            FirearmComponentNode nodeComponent = newNodeObj.AddComponent<FirearmComponentNode>();

            nodeComponent.essential = profile.essential;
            nodeComponent.isHidden = profile.isHidden;
            nodeComponent.requiredTag = profile.requiredTag;
            
            if (profile.childComponent != null)
            {
                nodeComponent.component = profile.childComponent;
                nodeComponent.componentRuntime = nodeComponent.component.GenerateRuntime(nodeComponent);
            }
            
            nodes.Add(nodeComponent);
        }

        runtime.nodes = nodes.ToArray();

        return runtime;
    }
    
    public virtual FirearmComponentRuntime GenerateRuntime(FirearmComponentNode parentNode, FirearmComponentRuntime savedRuntime)
    {
        if (parentNode.component.componentPrefab == null) return savedRuntime;
        
        savedRuntime.componentObject = Instantiate(parentNode.component.componentPrefab, parentNode.transform);
        savedRuntime.componentObject.transform.rotation = parentNode.transform.rotation;

        return savedRuntime;
    }

    public virtual void CleanUp(FirearmComponentRuntime runtime)
    {
        if (runtime == null) return;
        
        if (runtime.componentObject != null)
        {
            Destroy(runtime.componentObject);
        }

        foreach (FirearmComponentNode runtimeNode in runtime.nodes)
        {
            if(runtimeNode == null) continue;
            runtimeNode.Clear();
            Destroy(runtimeNode.gameObject);
        }
    }

    #endregion
}

// Generated by component node to store runtime data related to current component.
public class FirearmComponentRuntime
{
    [NonSerialized] public FirearmComponentNode[] nodes;
    [NonSerialized] public GameObject componentObject;
}

// Serializable data, used to save and load component nodes.
public class FirearmComponentData
{
    // BEWARE: READONLY DATA DOESN'T DESERIALIZE
    public int index; // Index of Profile in componentNodes array.
    public string componentReference; // Addressable GUID to retrieve component scriptable object.
    public FirearmComponentRuntime runtimeData;
    public FirearmComponentData[] childReferences; // Data of existing child nodes.

    // Constructor

    public FirearmComponentData(AssetReference reference, FirearmComponentData[] childReferences, FirearmComponentRuntime runtimeData, int index = 0)
    {
        this.index = index;
        componentReference = reference.AssetGUID;
        this.childReferences = childReferences;
        this.runtimeData = runtimeData;
    }

    // This constructor takes the GUID string instead of the asset reference.
    [JsonConstructor] // Default Deserialization constructor.
    public FirearmComponentData(string reference, FirearmComponentData[] childReferences, FirearmComponentRuntime runtimeData, int index = 0)
    {
        this.index = index;
        componentReference = reference;
        this.childReferences = childReferences;
        this.runtimeData = runtimeData;
    }
    
    #region --- METHODS ---
    
    public static FirearmComponentData DataFromComponent(FirearmComponent component, FirearmComponentRuntime runtime, int index = 0)
    {
        AssetReference componentReference = component.reference;
        List<FirearmComponentData> componentConnections = new ();
        
        if (runtime == null)
        {
            Debug.LogError("Error: Attempted to save component with no runtime");
            return new FirearmComponentData(componentReference, componentConnections.ToArray(), null, index);;
        }

        if (runtime.nodes != null)
        {
            for (int i = 0; i < runtime.nodes.Length; i++)
            {
                FirearmComponentNode node = runtime.nodes[i];
                if (node != null && node.component != null)
                {
                    componentConnections.Add(DataFromComponent(node.component, node.componentRuntime, i));
                }
            }
        }
        
        Debug.Log(componentConnections.Count);
        
        return new FirearmComponentData(componentReference, componentConnections.ToArray(), runtime, index);
    }

    #endregion
}